# -*- coding: utf-8 -*-
"""
Created on Thu May 10 10:18:45 2018

@author: zhaogra
"""

#python class tutorial 
import datetime

class Employee:
    numberofem=0 #this is the class variable
    pay_factor=1.04
    def __init__(self,first, last, pay):
        self.first=first
        self.last=last
        #self.fullname=self.first+self.last
        self.payamount=pay
        Employee.numberofem+=1
    def pay(self):
        return self.payamount*self.pay_factor #you can use class variable by Employee.pay_factor or using instance variable by self.pay_factor
    def payraise(self):
        self.payamount=self.payamount*self.pay_factor
    @property
    def fullname(self):
        return self.first+' '+self.last
    @fullname.setter
    def fullname(self,name):
        first, last = name.split('-')
        self.first=first
        self.last=last
    @fullname.deleter
    def fullname(self):
        print('name deleted!')
        self.first=None
        self.last=None
    @classmethod
    def tranform(cls,st):
        first, last, pay=st.split('-')
        return cls(first, last, pay)
    @staticmethod
    def is_weekday(day):
        if day.weekday()==5 or day.weekday()==6:
            return False
        return True
    
print(Employee.numberofem)
grant=Employee('grant','zhao',1000000)
yaoming=Employee('yaoming','he',1000)        

grant.first
grant.last
grant.fullname()
grant.first='qiyuan'
grant.fullname
grant.fullname='michael-jorndan'
del grant.fullname

d=datetime.datetime(2016,1,1)

Employee.is_weekday(d)

st1='Michael-Jordan-10000000'
michael=Employee.tranform(st1)
michael.payamount
grant.pay_factor=2


print(grant.pay())
print(yaoming.pay())

print(Employee.numberofem)


class Developer(Employee):
    pay_factor=1.1
    def __init__(self,first, last, pay, prog):
        super().__init__(first, last, pay)
        self.prog=prog
    

    



grant=Developer('grant','zhao',1000000,'python')
yaoming=Developer('yaoming','he',1000,'java')  

grant.payamount
grant.payraise()
grant.payamount

grant.prog
yaoming.prog


class Manager(Employee):
    def __init__(self,first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None:
            self.employees=[]
        else:
            self.employees=employees
            
    def add_employee(self,emp):
        if emp not in self.employees:
            self.employees.append(emp)
    def remove_employee(self,emp):
        if emp in self.employees:
            self.employees.remove(emp)
    def print_employee(self):
        for emp in self.employees:
            print('-->',emp.fullname())
    def __repr__(self):
        return "Employee('{}','{}',{})".format(self.first,self.last,self.payamount)
    def __str__(self):
        return "{} - {}".format(self.fullname(),self.payamount)
    def __add__(self,other):
        return self.first+other.first

mgr_1=Manager('sue','buffett',90000,[grant])

mgr_2=Manager('magic','johnson',10000)
mgr_1.print_employee()
mgr_1.add_employee(yaoming)

print(isinstance(mgr_1,Developer))
print(issubclass(Manager, Developer))

mgr_1+mgr_2

print(mgr_1)
repr(mgr_1)
str(mgr_1)






